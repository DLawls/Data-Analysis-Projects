# -*- coding: utf-8 -*-
"""NN2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fLCU5y3KCpsTCjhbuXKSlhHj08gp8PyR
"""

# Import Libraries
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import sklearn
from sklearn.neural_network import MLPClassifier
from sklearn.neural_network import MLPRegressor

# Import Modules
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from math import sqrt
from sklearn.metrics import r2_score

# Read Data, Check Data(Training)
trainData = pd.read_csv('DMV302_Assessment_2_AtRiskStudentsTraining.csv') 
print(trainData.shape)
trainData.describe().transpose()

# Read Data, Check Data(Test)
testData = pd.read_csv('DMV302_Assessment_2_AtRiskStudentsTest.csv') 
print(testData.shape)
testData.describe().transpose()

# Merge data and check it 
df = trainData.append(testData)
print(df.shape)
df.describe().transpose()

# Create Arrays for Features and the Response Variable
target_column = ['at-risk'] 
predictors = list(set(list(df.columns))-set(target_column))
df[predictors] = df[predictors]/df[predictors].max()
df.describe().transpose()

# Recreate Training & Test Sets
X = df[predictors].values
y = df[target_column].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3333333, random_state=40)
print(X_train.shape); print(X_test.shape)

from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(500), activation='relu', solver='adam', max_iter=500)
mlp.fit(X_train,y_train)

predict_train = mlp.predict(X_train)
predict_test = mlp.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix


print(confusion_matrix(y_train,predict_train))
print(classification_report(y_train,predict_train))



# Evaluate implementation using Test Data
print(confusion_matrix(y_test,predict_test))
print(classification_report(y_test,predict_test))



from sklearn.neural_network import MLPClassifier

mlp = MLPClassifier(hidden_layer_sizes=(20,20,20,20,20,20,20,20,20), activation='relu', solver='adam', max_iter=500)
mlp.fit(X_train,y_train)

predict_train = mlp.predict(X_train)
predict_test = mlp.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix


print(confusion_matrix(y_train,predict_train))
print(classification_report(y_train,predict_train))

# Evaluate implementation using Test Data
print(confusion_matrix(y_test,predict_test))
print(classification_report(y_test,predict_test))

